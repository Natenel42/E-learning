{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hp/Documents/ALX/E-learning/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet StudentRegisterComponent = class StudentRegisterComponent {\n  ngOnInit() {}\n  constructor(router, afAuth, toastr, afs, appService) {\n    this.router = router;\n    this.afAuth = afAuth;\n    this.toastr = toastr;\n    this.afs = afs;\n    this.appService = appService;\n    this.busy = false;\n  }\n  registerUserwithEmailPassword() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this.emailAddress === undefined) throw 'Please Enter Email Address';\n        if (_this.password === undefined) throw 'Please Enter Password';else if (_this.password.length < 6) throw 'Password too short. Minimum is 6 characters.';else if (_this.password !== _this.confirm_password) throw \"Passwords don't match.\";\n      } catch (msg) {\n        _this.toastr.warning(msg);\n        return;\n      }\n      _this.busy = true;\n      try {\n        yield _this.afAuth.createUserWithEmailAndPassword(_this.emailAddress, _this.password);\n        const loggedInUser = yield _this.appService.loggedInUser();\n        if (!loggedInUser) {\n          return;\n        }\n        const student = {\n          userId: loggedInUser.uid,\n          firstName: _this.firstName,\n          middleName: _this.middleName,\n          lastName: _this.lastName,\n          birthDate: _this.birthDate,\n          emailAddress: _this.emailAddress,\n          year: 1,\n          semester: 1,\n          section: 1,\n          department: _this.department,\n          program: _this.program\n        };\n        yield _this.afs.collection('Students').doc(loggedInUser.uid).set(student);\n        yield _this.afs.collection('Users').doc(loggedInUser.uid).set({\n          role: 'student',\n          ...student\n        });\n        _this.router.navigate(['/student/home']);\n      } catch (err) {\n        let errMsg = 'Incorrect Information Provided';\n        if (err.code === 'auth/email-already-in-use') errMsg = 'You already have account, please Login';else if (err.code === 'auth/invalid-email') errMsg = 'Email Address is Invalid';else if (err.code === 'auth/user-not-found') errMsg = \"You don't have account with us. Please Register!\";\n        _this.toastr.warning(errMsg);\n        _this.busy = false;\n      }\n    })();\n  }\n};\nStudentRegisterComponent = __decorate([Component({\n  selector: 'app-student-register',\n  templateUrl: './student-register.component.html',\n  styleUrls: ['./student-register.component.scss']\n})], StudentRegisterComponent);\nexport { StudentRegisterComponent };","map":{"version":3,"mappings":"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","names":["Component","StudentRegisterComponent","ngOnInit","constructor","router","afAuth","toastr","afs","appService","registerUserwithEmailPassword","emailAddress","undefined","password","length","confirm_password","msg","warning","busy","createUserWithEmailAndPassword","loggedInUser","student","userId","uid","firstName","middleName","lastName","birthDate","year","semester","section","department","program","collection","doc","set","role","navigate","err","errMsg","code","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\hp\\Documents\\ALX\\E-learning\\src\\app\\student\\student-register\\student-register.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AppService } from 'src/app/services/app.service';\n\n@Component({\n  selector: 'app-student-register',\n  templateUrl: './student-register.component.html',\n  styleUrls: ['./student-register.component.scss'],\n})\nexport class StudentRegisterComponent implements OnInit {\n  firstName: any;\n  middleName: any;\n  lastName: any;\n  emailAddress: any;\n  password: any;\n  confirm_password: any;\n  birthDate: any;\n  program: any;\n  department: any;\n\n  busy = false;\n\n  ngOnInit() {}\n\n  constructor(\n    public router: Router,\n    public afAuth: AngularFireAuth,\n    public toastr: ToastrService,\n    private afs: AngularFirestore,\n    public appService: AppService\n  ) {}\n\n  async registerUserwithEmailPassword() {\n    try {\n      if (this.emailAddress === undefined) throw 'Please Enter Email Address';\n      if (this.password === undefined) throw 'Please Enter Password';\n      else if (this.password.length < 6)\n        throw 'Password too short. Minimum is 6 characters.';\n      else if (this.password !== this.confirm_password)\n        throw \"Passwords don't match.\";\n    } catch (msg: any) {\n      this.toastr.warning(msg);\n      return;\n    }\n\n    this.busy = true;\n    try {\n      await this.afAuth.createUserWithEmailAndPassword(\n        this.emailAddress,\n        this.password\n      );\n      const loggedInUser = await this.appService.loggedInUser();\n\n      if (!loggedInUser) {\n        return;\n      }\n\n      const student = {\n        userId: loggedInUser.uid,\n        firstName: this.firstName,\n        middleName: this.middleName,\n        lastName: this.lastName,\n        birthDate: this.birthDate,\n        emailAddress: this.emailAddress,\n        year: 1,\n        semester: 1,\n        section: 1,\n        department: this.department,\n        program: this.program\n      };\n\n      await this.afs.collection('Students').doc(loggedInUser.uid).set(student);\n\n      await this.afs\n        .collection('Users')\n        .doc(loggedInUser.uid)\n        .set({\n          role: 'student',\n          ...student,\n        });\n\n      this.router.navigate(['/student/home']);\n    } catch (err: any) {\n      let errMsg = 'Incorrect Information Provided';\n      if (err.code === 'auth/email-already-in-use')\n        errMsg = 'You already have account, please Login';\n      else if (err.code === 'auth/invalid-email')\n        errMsg = 'Email Address is Invalid';\n      else if (err.code === 'auth/user-not-found')\n        errMsg = \"You don't have account with us. Please Register!\";\n\n      this.toastr.warning(errMsg);\n\n      this.busy = false;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}